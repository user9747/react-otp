{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["IB","styled","InputBox","memo","autoFocus","n","gap","inputStyle","useState","Array","ref","useRef","useEffect","keyListener","e","temp_otp","inputElements","isNaN","index","element","document","setOtp","otp","console","onChange","style","width","display","justifyContent","type","key","maxLength","value","SyntaxHighlighter","registerLanguage","jsx","Code","codeString","customStyle","overflow","language","duotoneDark","App","flexDirection","alignItems","margin","log","border","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.99065b83.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef, memo,Fragment } from 'react'\nimport styled from 'styled-components'\n\nconst IB = styled.input`\n  border: none;\n  outline: none;\n  background: #dedede;\n  border-radius: 10px;\n  color: black;\n  width: 30px;\n  height: 30px;\n  text-align: center;\n  &::-webkit-inner-spin-button,\n  &::-webkit-outer-spin-button {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    margin: 0;\n  }\n  -moz-appearance: textfield;\n`\nconst InputBox = memo(IB)\n\ninterface Props {\n  autoFocus?: boolean\n  n?: number\n  gap?: string\n  onChange: (e: string) => void\n  inputStyle?: (n?: number) => React.CSSProperties\n}\n\nconst ReactOtp = ({\n  autoFocus = false,\n  n = 3,\n  gap = '10px',\n  onChange,\n  inputStyle\n}: Props) => {\n  const [otp, setOtp] = useState<Array<string>>(Array(n).fill(''))\n  const ref = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const keyListener = (e: any) => {\n      var temp_otp = [...otp]\n      if (ref.current === null) return\n\n      const inputElements = ref.current.children\n      if (!isNaN(e.key)) {\n        for (let index = 0; index < inputElements.length; index++) {\n          if (document.activeElement === inputElements[index]) {\n            temp_otp[index] = e.key\n            setOtp(temp_otp)\n            if (index === otp.length - 1)\n              // (inputElements[index] as HTMLInputElement).blur()\n              (inputElements[index] as HTMLInputElement).focus()\n            else (inputElements[index + 1] as HTMLInputElement).focus()\n            break\n          }\n        }\n      } else if (e.key === 'Backspace' && temp_otp.length !== 0) {\n        for (let index = 0; index < inputElements.length; index++) {\n          const element = inputElements[index]\n          if (temp_otp[index] === '') {\n            if (index !== 0)\n              (inputElements[index - 1] as HTMLInputElement).focus()\n            break\n          }\n          if (document.activeElement === element) {\n            temp_otp[index] = ''\n            setOtp(temp_otp)\n            break\n          }\n        }\n      }\n    }\n    console.log(otp)\n    if (otp.join('').length === n) onChange(otp.join(''))\n    document.addEventListener('keyup', keyListener)\n    return () => {\n      document.removeEventListener('keyup', keyListener)\n    }\n  }, [otp])\n\n  return (\n    <div\n      ref={ref}\n      style={{ width: '100%', display: 'flex', justifyContent: 'center' }}\n    >\n      {otp.map((_item, index) =>\n        index === 0 ? (\n          <InputBox\n            type='number'\n            key={index}\n            autoFocus={autoFocus}\n            maxLength={1}\n            value={otp[index] || ''}\n            style={inputStyle ? inputStyle(index) : {}}\n          />\n        ) : (\n          <Fragment>\n            <div style={{ width: gap }} />\n            <InputBox\n              type='number'\n              key={index}\n              maxLength={1}\n              value={otp[index] || ''}\n              style={inputStyle ? inputStyle(index) : {}}\n            />\n          </Fragment>\n        )\n      )}\n    </div>\n  )\n}\n\nexport default memo(ReactOtp)\n","import React from 'react'\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport { duotoneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport ReactOtp from 'react-otp-box'\nimport 'react-otp-box/dist/index.css'\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\n\nconst Code = ({ codeString }) => {\n  return (\n    <SyntaxHighlighter customStyle={{ overflow: \"visible\",width:\"50%\" }} language=\"jsx\" style={duotoneDark}>\n      {codeString}\n    </SyntaxHighlighter>\n  );\n};\n\n\nconst App = () => {\n  return (\n    <div style={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\", alignItems: \"center\" }}>\n      <div style={{ width: \"80%\", margin: \"20px 0px\" }}>\n        <h1> Autofocus</h1>\n        <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n          <Code codeString={`<ReactOtp autoFocus />`} />\n          <ReactOtp\n            autoFocus\n          />\n        </div>\n\n        <h1> Number of boxes</h1>\n        <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n\n          <Code codeString={`<ReactOtp n={6} />`} />\n          <ReactOtp\n            n={6}\n          />\n        </div>\n        <h1>Gap</h1>\n        <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n\n          <Code codeString={`<ReactOtp gap=\"30px\" />`} />\n\n          <ReactOtp\n            gap=\"30px\"\n          />\n        </div>\n        <h1>Custom Box Style</h1>\n        <div style={{ width: \"100%\", display: \"flex\", alignItems: \"center\" }}>\n          <Code codeString={`\n      <ReactOtp\n        n={6}\n        onChange={(e) => console.log(e)}\n        inputStyle={(n) => {\n          if (n % 2)\n            return { border: \"1px solid red\" }\n          else\n            return { border: \"1px solid green\" }\n        }}\n        gap=\"30px\"\n      />`} />\n\n          <ReactOtp\n            n={6}\n            onChange={(e) => console.log(e)}\n            inputStyle={(n) => {\n              if (n % 2)\n                return { border: \"1px solid red\" }\n              else\n                return { border: \"1px solid green\" }\n            }}\n            gap=\"30px\"\n          />\n        </div>\n\n      </div>\n    </div >\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}